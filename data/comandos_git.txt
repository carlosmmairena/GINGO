mié 04 mar 2020 23:25:18 -- Carlos Mairena López
******************** Estructura de un repositorio git *********************
Workspace: Es el estado *real* de nuestros ficheros de manera local, la forma en que los vemos en nuestro IDE o guardados en el disco duro.

Stage: Aquí se encuentran los cambios sobre nuestros ficheros que se incluirán en la próxima carga cuando los hemos agregados.

Commits (locales): Cada commit es un grupo de cambios sobre uno o varios ficheros, con una descripción, una fecha, un autor, etc. Para sa

Commits (remotos): Cuando se suben cambios al remoto, estos entran a formar parte del histórico compartido entre los desarrolladores del proyecto.

******************** Instalar y configurar *********************

1. Primero debemos instalar git en nuestra computadora, en caso de que no lo tengamos listo. En el caso de MAC OS y Linux se instalan desde sus respectivos repositorios de los sistemas operativos, para windows se puede instalar un software que GitHub ofrece.

2. Ahora que lo instalamos, vamos a configurar el usuario local, para ello debemos ejecutar los siguientes comandos.

        git configure --global user.name "Nombre del Autor"
        git configure --global user.email "correodeautor@csd.com"

3. Ahora podemos ver nuestro usuario configurado de las siguientes maneras:
    
    B) git config --global --list
    A) Buscando en nuestra carpeta de usuario o del programa de git, un archivo que se llama .gitconfig

*********************** Puede que ya un usuario configurado, para ello podemos re configurar:

1. Eliminar al usuario anterior:
    git config --global --unset-all user.name
    git config --global --unset-all user.email

2. Crear nuestro usuario:
    git configure --global user.name "Nombre del Autor"
    git configure --global user.email "correodeautor@csd.com"


NOTA: Al realizar esta configuración, nuestros cambios serán a nuestro nombre, podremos diferenciarlos entre los cambios de las demás personas.


******************** Iniciar un repositorio local *********************

Para iniciar un nuevo repositorio, debemos primero posicionarnos en la carpeta raíz de nuestro proyecto,luego ejecutando el siguiente comando:
    git init

Para ver todos los commits que se han hecho en la rama que nos encontramos:
    git log

En caso de que ya teníamos un repositorio creado en GitHub, GitLab, BitBucket, etc... podemos agregar/fusionar ese repositorio en el nuestro que ya hemos creado, para ello ejecutamos el siguiente comando:
    git remote add origin https://repositorio.git

Con eso hemos añadido una opcón remota, esto lo podemos hacer aunque ya tengamos archivos en nuestro repositorio local, solo habrá que realizar un pull para fusionar los datos de ese repositorio con el nuestro.

Igualmente podemos clonar un repositorio sin necesidad de iniciar uno nuevo, comúnmente se clonan repositorios que ya tienen un proyecto, o es un proyecto al que te estás uniendo como colaborador@.

Para clonar repositorios se hace de la siguiente forma:
    git clone https://ellinkdelrepo.git

******************** Actualizando repositorio ********************

Según las mejores formas actualizar un repositorio, es agregar los cambios, cargarlos al repositorio local y cuando ya tengamos todos esos listos los cargamos al repositorio remoto. Las ramas las podemos utilizar para llevar a cabo varios desarrollos en paralelos de un mismo proyecto. Pero antes de empezar a crear las branchs vamos a concer los siguientes conceptos:

Comandos principales de git:

    git status -> Este permite ver el estado del repositorio, si hay cambios para guardar
    git status -sb -> Lo mismo al anterior, pero con la información más resumida
    
    git log -p -2 -> Este permite ver los 2 últimos commits y revisar en cada uno las modificaciones que se hicieron cada archivo

    git add archivos -> Este permite agregar los cambios a preparar para cargarlos al repositorio.

    git commit -> Permite cargar localmente los cambios agregados con la opción add

    git git reset HEAD arhivos.java -> Este permite sacar del stage o área preparada para hacer commit, por ejemplo que hayamos agregado ciertos cambios y que nos haya hecho falta agregar más.

    git checkout -- . -> Este comando permite deshacer todos los cambios del workspace, osea, elimina todo el avance hasta el último commit.

    git clean -d -i -> Este elimina todos los archivos que no están en seguimiento.
    
    git commit --amend -> Con este comando agregamos los archivos que nos hicieron falta al último commit que hemos hecho. Eso si en este caso no lo hemos cargado al servidor remoto.

    git commit --amend -C HEAD -> Con este comando modificamos el último commit y reutilizamos su mensaje, así como su mismo IDs

    git reset #commit -> Con este comando decimos eliminar todos los commit que hay encima de este número de commit indicado, pero los cambios del workspace no los elimina. Le llaman "soft reset" || "reseteo suave".
    git reset --hard #commit -> Con este commit, eliminamos los commits junto con todos los cambios que se hicieron, osea, te regresa a ese commit y sus cambios.
    git reset HEAD~1 -> La manera más rápida para elminar el último commit.
                        La opción reset lo que nos hace es

*************************** Actualizando cambios al servidor remoto ***************************

    git push ramaRemota ramaLocal -> Con esta opción subimos una serio de commits locales a nuestros servidor remoto.

    git push -f ramaRemota ramalocal -> Con esta opción, aplicamos nuestros commits locales al repositorio remoto, si eliminamos algunos commits, esos también se van a eliminar en el remoto a pesar de que no estén en el mismo orden. Aquí seguramente tendremos que poner la contraseña de nuestro usuario del remoto

    git fetch origin/ramaremota -> Este descarga las referencias y cambios hechos de un repositorio diferente, ya agregado anteriormente
    git merge HEAD -> Este fusiona el commit HEAD (commit posicionado) del repositorio descargado con el fetch.
      **git pull rama -> Este es una combinación de los dos comandos anteriores        


    git remote -v -> Para ver los repositorios remotos que tenemos

--------------------------------------------------------------------------------------
******************************** Usando ramas ********************************

Las ramas en git son trabajos encapsulados de la rama master(principal), así no se está haciendo mezclas en el proyecto principal en cada commit y evita que se altere el orden de actualizaciones, sino, hasta que se haya terminado por completo cada tarea de cada contribuyente.

Antes de continuar, vamos aclara ciertos conceptos de las ramas en git:

1. master: Es una rama que al iniciar un repositorio, git la crea por defecto, es una rama que cumple las mismas funciones que hagamos con otras.

2. origin: Este es un nombre que le da git por defecto al clonar un repositorio remoto, origin es el nombre de referencia que tenemos para comunicarnos con una rama remota, este guarda el enlace del repositorio remoto con su rama.

3. HEAD: Este es un apuntador, es decir, nos indica en cuál commit estamos posicionados. De igual forma podemos movernos entre los commits y esta etiqueta HEAD es quien nos indica en cual commit estamos usando.

Comandos básicos:

    git branch -> Lista las ramas que tenemos en nuestro repositorio local, la marcada con asterisko es la rama en la que estamos en posición.

    git branch -av -> Con esta opción veremos todas las ramas que tengamos, hasta las remotas y el detalle del último commit hecho en cada una de ellas.


                        **************************
*** En esta parte nos enfocaremos en crear ramas para nuestros repositorios *****
                        **************************
Tener en cuenta de que al cambiarnos de rama, los commits que hagamos ahí van a quedar solamente en esa rama y no va a intervenir en las otras, hasta que las fusionemos.

    git branch ramaNueva -> Creamos una nueva rama en nuestro repositorio local, aquí todos los commits que tiene la rama master se le han heredado a esta nueva rama.

    git checkout -b ramaNueva -> Con este creamos una rama y de una vez nos cambiamos a esa nueva rama.
remoto. Luego de hacer esto, tendrás referencias a todas las ramas del remoto, las cuales 
    git checkout ramaMovernos -> De esta manera nos movemos de ramas, ya que por defecto estamos en la rama master, pero con checkout nos cambiamos de ramas.

    git branch --delete ramaborrar -> Con este comando eliminamos una rama, en caso de que la hayamos creado con algún defecto.

    git checkout #commit -> Con este comando nos posicionamos en un commit diferente de la misma rama en que nos encontremos, pero no elimina los demás commits

    git reflog -> Con este vemos los movimientos que hemos hecho entre los commits


                **************************
*** Ahora iremos a UNIFICAR ramas locales ***
                **************************
    merge -> Esta opción lo que hace es fusionar ramas y crea otro commit con esas modificaciones.
    rebase -> Esta opción fusiona ramas pero sin crear otro commit.

Al momento de tener diferentes ramas, y querer unificar sus progresos, la opción merge es la más adecuada ya que nos permite tener más control. Si utilizamos solo "git merge ramaActualizada", lo que pasará es que unificará toda la historia de esa ramaActualizada a la nuestra.

Si lo único que deseamos es que se una el último commit de la rama actualizada, hay que usar la opción squash, donde git crea un nuevo commit y no registra toda la historia de esa rama en la que estamos posicionados.

Para lograr esto tendremos que realizar los siguientes pasos:

->    1. git merge --squash ramaActualizada

-> Si tenemos conflictos entre las líneas, entonces eliminamos las que no necesitemos y agregamos los archivos nuevos que no están agregados. En caso de que nada ha dado error, simplemente saltamos el paso de editar los cambios.

    2. git status -sb -> revisamos si falta agregar algún otro archivo.
    3. git add . -> agregamos
    4. git commit -m "mensaje" -> Creamos el commit con los cambios fusionados de ambas ramas


-> en caso de que se desconectan 2 ramas y queremos fusionarlas, nos saldrá que no están relacionadas y no se pueden fusionar, para eso tendremos que usar la opción:
     git merge copiaMaster --allow-unrelated-histories


                **************************
*** Ahora iremos a UNIFICAR ramas remotas ***
                **************************
Algunas veces tenemos varias ramas en nuestro repositorio local y esas mismas quisiéramos que estén en el repositorio remoto para tener un respaldo en la nube.

    1. Tenemos que tener la rama creada en nuestro repositorio local.
    2. Luego vamos a utilizar la opción push.
        git push ramaRemota ramaLocal

Esa opción funciona independientemente si la rama local que estamos enviando existe o no en el remoto, así que si no está en el remoto se crea en el remoto.

Si la rama ya estaba creada, entonces git push ya sabe que pertenece a esa rama. Ejemplo
    git push ramaRemota dev -> Se crea esa rama si no existe

    git push ramaRemota master -> Se envía a la rama que tiene ese mismo nombre en remoto

Si por alguna razón borramos una rama en nuestro repositorio local, tendremos que hacerlo manualmente la eliminación de la rama remota.

-------------------------------------------------------------------------------------
*********** PESTAÑAS QUE SE VEN EN GITHUB ***********

CODE -> Esta pestaña nos muestra los ficheros y directorios del repositorio

ISSUES -> Esta nos permite ver las formas de continuar, mejorar o solucionar algún error de nuestro repositorio, así también lo que tengamos pendiente. Esto uno lo agrega, es parecido a una forma en que nos ayuda a gestionar los cambios, como un sistema de apuntes.

MILESTONES -> Estos son grupos de Issues, osea, agrupa los issues que tengamos ya en nuestro repoositorio y nos ayuda a diferenciar su temática.

LABELS -> Estos son una manera de organizar diferentes problemas en el proyecto... como decir cuál sería un bug, un duplicate, si es inválido. También podemos crear los nuestros propios. Estos dan formato a los Issues y Milestones que tengamos.
